@page "/connect6/game/{GameId}"
@using Excubo.Blazor.Canvas.Contexts
@using Microsoft.AspNetCore.SignalR.Client
@using System
@using System.Collections.Generic
@using System.Text
@using System.Threading
@using Microsoft.AspNetCore.WebUtilities
@using Excubo.Blazor.Canvas
@inject NavigationManager NavigationManager
@implements IDisposable
@inject IJSRuntime jsRuntime

<div style="text-align: center;">
  <h2>@stringResource[languageCode]["GameTitle"]</h2>
  @if (boardLineStrings.Count > 0)  {
    <div>@stringResource[languageCode]["CopyLinkInstruction"]</div>
    <a href="@connectionUrl">@connectionUrl</a>
    <div>@connectedUsersMessage</div>
    <audio id="stoneSound" preload="auto" src="data:audio/wav;base64,@stoneSound" />

    <hr>
    <h3>@turnMessage</h3>
    @if (winnerExist)
    {
      <div>
        <button @onclick="NewGame" disabled="@(!IsConnected || lastPlayX == -1)">@stringResource[languageCode]["NewGameButton"]</button>
      </div>
      <br />
    }
    <div>
      <Canvas
        @ref="boardCanvas"
        width="665px"
        height="665px"
        style="@canvasStyleString"
        @onclick="@(e => PlayCanvas(e))"
        @onmousemove="@(e => OnMouseMouveCanvas(e))"
        @onmouseout="@(e => OnMouseMouveCanvas(e))"
      />
    </div>
    <br />
    <p>
      <button @onclick="Undo" disabled="@(!IsConnected || lastPlayX == -1)">@stringResource[languageCode]["UndoButton"]</button>
      <button @onclick="NewGame" disabled="@(!IsConnected || lastPlayX == -1)">@stringResource[languageCode]["NewGameButton"]</button>
    </p>
    <p>
      <select class="form-control selectpicker" @onchange="OnThemeChanged">
        <option value="go">Go Board</option>
        <option value="reversi">Reversi Board</option>
      </select>
    </p>
    <p>
      <input type="checkbox" @bind="shouldPlaySound" /> @stringResource[languageCode]["PlayStoneSound"]
    </p>
    <hr>

    <div>@stringResource[languageCode]["ExpirationMessage"]</div>
  }
  <div>@serverMessage</div>
  <div>@NewGameInstruction()</div>
</div>
<div style="display:none;">
  @foreach (String imageTheme in visualThemes.Keys)
  {
    @foreach (Char boardChar in visualThemes[imageTheme].Keys)
    {
      <img
        id="@("boardimage_" + imageTheme + "_" + boardChar)"
        style="border:0px; padding:0px;"
        src="data:image/png;base64,@visualThemes[imageTheme][boardChar]"
      />
    }
  }
</div>

@code {
  private Int32 cellSize = 35;
  private Single zoomFactor = 1.0f;
  private HubConnection hubConnection;
  private List<String> boardLineStrings = new();
  private List<String> boardLineStringsForRender = new();
  private String connectedUsersMessage;
  private String turnMessage;
  private String serverMessage;
  private Int32 lastPlayX = -1;
  private Int32 lastPlayY = -1;
  private Int32 lastLastPlayX = -1;
  private Int32 lastLastPlayY = -1;
  private Char winnerChar = 'n';
  private String languageCode;
  private String currentVisualTheme;
  private Dictionary<String, Dictionary<Char, String>> visualThemes;
  private String stoneSound;
  private Boolean shouldPlaySound = true;
  private HashSet<Char> playedStone = new() { 'b', 'B', 'w', 'W' };
  private Dictionary<String, String> currentState = new();
  private Dictionary<String, Dictionary<String, String>> stringResource;
  private Canvas boardCanvas;
  private Int32 lastMouseMoveBoardX = -1;
  private Int32 lastMouseMoveBoardY = -1;
  private String canvasStyleString = "";
  private String serverUrl = "";
  private System.Timers.Timer resizeTimer;
  private const Double RegularResizeInterval = 1000d;
  private const Double RapidResizeInterval = 50d;

  [Parameter]
  public String GameId { get; set; }

  protected override async Task OnInitializedAsync()
  {
    SetLanguages();
    SetVisualThemes();
    SetStoneSound();
    await SetResizeHandlers();
  }

  protected async Task SetResizeHandlers()
  {
    resizeTimer = new System.Timers.Timer(RegularResizeInterval);
    resizeTimer.AutoReset = true;
    resizeTimer.Enabled = true;
    resizeTimer.Elapsed += async (sender, o) => await BrowserResizeHandler();

    BrowserResizeService.OnResize += BrowserHasResized;
    await jsRuntime.InvokeVoidAsync("browserResize.registerResizeCallback");
  }

  protected override async Task OnParametersSetAsync()
  {
    await BuildConnection();
    await InitializeConnection();
  }

  #region Received Event

  private async Task BuildConnection()
  {
    try {
      await hubConnection.DisposeAsync();
    } catch {}

    hubConnection = new HubConnectionBuilder()
      .WithUrl(NavigationManager.ToAbsoluteUri("/Connect6Hub"))
      .Build();

    hubConnection.KeepAliveInterval = TimeSpan.FromSeconds(60);

    hubConnection.On<Dictionary<String, String>>("CurrentBoard", async (currentState) => await CurrentBoard(currentState));
    hubConnection.On<String>("ServerMessage", (messageString) => ServerMessage(messageString));
    hubConnection.On<String>("NoGameFound", (messageString) => NoGameFound(messageString));
    hubConnection.On<Int32>("ConnectionSize", (connectionSize) => ConnectionSize(connectionSize));
    hubConnection.On<String>("ServerUrl", (serverUrl) => { this.serverUrl = serverUrl; });
    hubConnection.On<String>("NewGameIdReceived", (newGameId) => NewGameIdReceived(newGameId));

    hubConnection.Closed += async (e) => await OnClosed(e);
  }

  private void NewGameIdReceived(String newGameId) => NavigationManager.NavigateTo($"connect6/game/{newGameId}?lang={languageCode}");

  private async Task CurrentBoard(Dictionary<String, String> currentState)
  {
    this.currentState = currentState;
    var tempBoard = currentState["boardString"].Split("\n").ToList();
    lastPlayX = Int32.Parse(currentState["lastPlayX"]);
    lastPlayY = Int32.Parse(currentState["lastPlayY"]);
    lastLastPlayX = Int32.Parse(currentState["lastLastPlayX"]);
    lastLastPlayY = Int32.Parse(currentState["lastLastPlayY"]);
    winnerChar = DetermineWinner(tempBoard, lastPlayX, lastPlayY);

    if (winnerExist)
      turnMessage = String.Format(
        stringResource[languageCode]["VictoryMessage"],
        winnerChar == 'b' ? stringResource[languageCode]["Black"] : stringResource[languageCode]["White"]
      );
    else
      turnMessage = String.Format(
        stringResource[languageCode]["TurnMessage"],
        currentState["currentTurn"] == "b" ? stringResource[languageCode]["Black"] : stringResource[languageCode]["White"],
        currentState["currentTurnRemaining"]
      );

    Boolean firstTimeRunning = (boardLineStrings.Count == 0);
    boardLineStrings = CurrentStateToStrings();

    StateHasChanged();

    if (shouldPlaySound && !firstTimeRunning)
      if (currentState["soundCue"] == "placeStone")
        await jsRuntime.InvokeVoidAsync("soundPlayer.playStoneSound");

    if (firstTimeRunning)
    {
      //await BrowserHasResized();
      await DrawWholeCanvasAsync();
    }
    else
    {
      await DrawDiffBoardAndSetAsync(CurrentStateToStrings());
    }
  }

  private void ServerMessage(String messageString)
  {
    serverMessage = messageString;
    StateHasChanged();
  }

  private void NoGameFound(String messageString)
  {
    serverMessage = stringResource[languageCode]["NoGameFound"];
    StateHasChanged();
  }

  private void ConnectionSize(Int32 connectionSize)
  {
    connectedUsersMessage = String.Format(stringResource[languageCode]["CurrentSessionUsersMessage"], connectionSize);
    StateHasChanged();
  }

  #endregion

  private async Task OnClosed(Exception e)
  {
    await InitializeConnection();
    StateHasChanged();
  }

  private async Task OnThemeChanged(ChangeEventArgs e)
  {
    currentVisualTheme = e.Value.ToString();
    StateHasChanged();

    await DrawWholeCanvasAsync();
  }

  private async Task BrowserHasResized()
  {
    await Task.Run(() =>
    {
      resizeTimer.Interval = RapidResizeInterval;
    });
  }

  private async Task BrowserResizeHandler()
  {
    try
    {
      Single newZoomFactor = 1.0f;
      Single newWidth = await jsRuntime.InvokeAsync<Int32>("browserResize.getInnerWidth");
      Single totalBoardWidth = cellSize * boardLineStrings[0].Length + cellSize * 2.5f;
      if (newWidth < totalBoardWidth)
        newZoomFactor = newWidth / totalBoardWidth;

      if (newZoomFactor == zoomFactor)
        resizeTimer.Interval = RegularResizeInterval;
      else
      {
        resizeTimer.Interval = RapidResizeInterval;
        zoomFactor = newZoomFactor;
        canvasStyleString = $"width: {(Int32)(655 * zoomFactor)}px; height: {(Int32)(655 * zoomFactor)}px;";
        StateHasChanged();
      }
    }
    catch {}
  }

  private async Task InitializeConnection()
  {
    await hubConnection.StartAsync();
    await hubConnection.SendAsync("InitializeBoardAndConnection", GameId);
  }

  private void ConverMouseCoordinateToBoard(MouseEventArgs e, out Int32 boardX, out Int32 boardY)
  {
    boardX = (Int32)(e.OffsetX / zoomFactor) / 35;
    boardY = (Int32)(e.OffsetY / zoomFactor) / 35;
  }

  private async void OnMouseMouveCanvas(MouseEventArgs e)
  {
    ConverMouseCoordinateToBoard(e, out Int32 boardX, out Int32 boardY);
    if (boardX == lastMouseMoveBoardX && boardY == lastMouseMoveBoardY)
      return;
    List<String> newBoardLineStringsForRender = CurrentStateToStrings();
    Int32 upperDimension = newBoardLineStringsForRender.Count;
    if (
      0 <= boardX
      && boardX < upperDimension
      && 0 <= boardY
      && boardY < upperDimension
      && !playedStone.Contains(newBoardLineStringsForRender[boardY][boardX])
      && winnerChar == 'n'
    )
    {
      StringBuilder sb = new(newBoardLineStringsForRender[boardY]);
      if (currentState["currentTurn"] == "b")
        sb[boardX] = 'v';
      else
        sb[boardX] = 'q';
      newBoardLineStringsForRender[boardY] = sb.ToString();
    }
    await DrawDiffBoardAndSetAsync(newBoardLineStringsForRender);
    lastMouseMoveBoardX = boardX;
    lastMouseMoveBoardY = boardY;
  }

  private async Task DrawDiffBoardAndSetAsync(List<String> newBoardLineStringsForRender)
  {
    List<(Int32 X, Int32 Y)> cellsToUpdate = new();
    for (Int32 j = 0; j < newBoardLineStringsForRender.Count; ++j)
      for (Int32 i = 0; i < newBoardLineStringsForRender[j].Length; ++i)
        if (boardLineStringsForRender[j][i] != newBoardLineStringsForRender[j][i])
        {
          Boolean padLeft = i > 0;
          Boolean padRight = i < newBoardLineStringsForRender[j].Length - 1;
          Boolean padTop = j > 0;
          Boolean padBottom = j < newBoardLineStringsForRender.Count - 1;

          if (padTop)
          {
            cellsToUpdate.Add((i, j - 1));
            if (padLeft)
              cellsToUpdate.Add((i - 1, j - 1));
            if (padRight)
              cellsToUpdate.Add((i + 1, j - 1));
          }
          cellsToUpdate.Add((i, j));
          if (padLeft)
            cellsToUpdate.Add((i - 1, j));
          if (padRight)
            cellsToUpdate.Add((i + 1, j));
          if (padBottom)
          {
            cellsToUpdate.Add((i, j + 1));
            if (padLeft)
              cellsToUpdate.Add((i - 1, j + 1));
            if (padRight)
              cellsToUpdate.Add((i + 1, j + 1));
          }
        }
    await using (Context2D context = await boardCanvas.GetContext2DAsync())
    {
      foreach(var cell in cellsToUpdate.Select(cell => cell).AsParallel().Distinct())
      {
        String boardImageName
          = (cell.X == lastPlayX && cell.Y == lastPlayY) || (cell.X == lastLastPlayX && cell.Y == lastLastPlayY) ?
            $"boardimage_{currentVisualTheme}_{Char.ToUpper(newBoardLineStringsForRender[cell.Y][cell.X])}"
            : $"boardimage_{currentVisualTheme}_{newBoardLineStringsForRender[cell.Y][cell.X]}";
        await context.DrawImageAsync(boardImageName, cell.X * 35, cell.Y * 35);
      }
    }
    boardLineStringsForRender = newBoardLineStringsForRender;
  }

  private async Task DrawWholeCanvasAsync()
  {
    List<String> newBoardLineStringsForRender = CurrentStateToStrings();
    boardLineStringsForRender = new();
    for (Int32 j = 0; j < newBoardLineStringsForRender.Count; ++j)
    {
      StringBuilder sb = new();
      for (Int32 i = 0; i < newBoardLineStringsForRender[j].Length; ++i)
        sb.Append('-'); // Dummy char to rerendering of whole thing
      boardLineStringsForRender.Add(sb.ToString());
    }
    await DrawDiffBoardAndSetAsync(newBoardLineStringsForRender);
  }

  private List<String> CurrentStateToStrings() => currentState["boardString"].Split("\n").ToList();

  private Char DetermineWinner(List<String> tempBoard, Int32 lastPlayX, Int32 lastPlayY)
  {
    if (IsVictory('b', tempBoard, lastPlayX, lastPlayY))
      return 'b';
    else if (IsVictory('w', tempBoard, lastPlayX, lastPlayY))
      return 'w';
    else
      return 'n';
  }

  private Boolean IsVictory(Char stoneColor, List<String> tempBoard, Int32 lastPlayX, Int32 lastPlayY)
  {
    Int32 dimX = tempBoard[0].Length;
    Int32 dimY = tempBoard.Count;
    if (!IsWithinBoundary(dimX, dimY, lastPlayX, lastPlayY))
      return false;

    StringBuilder sb = new StringBuilder();
    String winningString = $"{stoneColor}{stoneColor}{stoneColor}{stoneColor}{stoneColor}{stoneColor}";

    // Horizontal Match
    sb.Clear();
    for (Int32 i = 0; i < dimX; ++i)
      sb.Append(tempBoard[lastPlayY][i]);
    if (sb.ToString().Contains(winningString))
      return true;

    // Vertical Match
    sb.Clear();
    for (Int32 j = 0; j < dimY; ++j)
      sb.Append(tempBoard[j][lastPlayX]);
    if (sb.ToString().Contains(winningString))
      return true;

    // Diagonal left
    Int32 ii = lastPlayX;
    Int32 jj = lastPlayY;
    while (IsWithinBoundary(dimX, dimY, ii - 1, jj - 1))
    {
      --ii;
      --jj;
    }
    sb.Clear();
    while (IsWithinBoundary(dimX, dimY, ii, jj))
    {
      sb.Append(tempBoard[jj][ii]);
      ++ii;
      ++jj;
    }
    if (sb.ToString().Contains(winningString))
      return true;
    // Diagonal right
    ii = lastPlayX;
    jj = lastPlayY;
    while (IsWithinBoundary(dimX, dimY, ii - 1, jj + 1))
    {
      --ii;
      ++jj;
    }
    sb.Clear();
    while (IsWithinBoundary(dimX, dimY, ii, jj))
    {
      sb.Append(tempBoard[jj][ii]);
      ++ii;
      --jj;
    }
    if (sb.ToString().Contains(winningString))
      return true;

    return false;
  }

  private Boolean IsWithinBoundary(Int32 dimX, Int32 dimY, Int32 x, Int32 y) => 0 <= x && x < dimX && 0 <= y && y < dimY;

  private Task PlayCanvas(MouseEventArgs e)
  {
    ConverMouseCoordinateToBoard(e, out Int32 boardX, out Int32 boardY);
    if (winnerExist)
      return Task.CompletedTask;
    else if (!playedStone.Contains(boardLineStrings[boardY][boardX]))
      return hubConnection.SendAsync("PlaceStone", GameId, boardX, boardY);
    else
      return Task.CompletedTask;
  }

  async Task Undo() => await hubConnection.SendAsync("UndoStone", GameId);

  async Task NewGame()
  {
    if (!await jsRuntime.InvokeAsync<Boolean>("confirm", stringResource[languageCode]["NewGameConfirmation"]))
      return;
    await hubConnection.SendAsync("NewGame", GameId);
  }

  private String connectionUrl => $"{serverUrl}{NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}";

  private MarkupString NewGameInstruction()
  {
    String message = String.Format(
      stringResource[languageCode]["NewGameInstruction"],
      $"<a href=\"{serverUrl}connect6/\">{serverUrl}connect6/</a>"
    );
    return (MarkupString)message;
  }


  private Boolean winnerExist => winnerChar != 'n';

  public Boolean IsConnected =>
      hubConnection.State == HubConnectionState.Connected;

  public void Dispose()
  {
    _ = hubConnection.DisposeAsync();
    BrowserResizeService.OnResize -= BrowserHasResized;
    resizeTimer.Stop();
  }

  private void SetLanguages()
  {
    stringResource = Connect6Lang.GetStringResources();

    // Parse query params
    var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("lang", out var languageCodeValue))
    {
      languageCode = languageCodeValue.First();
      if (!stringResource.ContainsKey(languageCode))
        languageCode = "en-us";
    }
    else
      languageCode = "en-us";
  }

  private void SetVisualThemes()
  {
    visualThemes = Connect6BoardResource.GetVisualThemes();
    currentVisualTheme = "go"; // Default
  }

  private void SetStoneSound()
  {
    stoneSound = Connect6BoardResource.GetStoneSound();
  }
}
