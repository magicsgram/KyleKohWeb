@page "/connect6/game/{GameId}"
@using Microsoft.AspNetCore.SignalR.Client
@using System
@using System.Collections.Generic
@using System.Text
@using System.Threading
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@implements IDisposable
@inject IJSRuntime jsRuntime

<div style="text-align: center;">
  <h2>@stringResource[languageCode]["GameTitle"]</h2>
  @if (boardLineStrings.Count > 0)
  {
    <div>@stringResource[languageCode]["CopyLinkInstruction"]</div>
    <a href="@connectionUrl">@connectionUrl</a>
    <div>@connectedUsersMessage</div>
    <audio id="stoneSound" preload="auto" src="data:audio/wav;base64,@stoneSound" />

    <hr>
    @if (reconnectTimer >= 0)
    {
      <h3>@String.Format(stringResource[languageCode]["DisconnectRefresh"], reconnectTimer)</h3>
    }
    else
    {
      <h3>@turnMessage</h3>
    }
    @if (winnerExist)
    {
      <div>
        <button @onclick="NewGame" disabled="@(!IsConnected || lastPlayX == -1)">@stringResource[languageCode]["NewGameButton"]</button>
      </div>
      <br />
    }
    <div style="zoom: @zoomFactor">
      <table order="0" cellspacing="0" cellpadding="0" style="border:0px; border-collapse:collapse; padding:@(cellSize * 2.5f); font-size:1px; display: inline;">
        <tbody>
          @for (Int32 j = 0; j < boardLineStrings.Count; ++j)
          {
            <tr style="vertical-align:top; border:0px; padding:0px;">
              @for (Int32 i = 0; i < boardLineStrings[j].Length; ++i)
              {
                var x = i;
                var y = j;
                <td style="border:0px; padding:0px;">
                  @if ((x == lastPlayX && y == lastPlayY) || (x == lastLastPlayX && y == lastLastPlayY))
                  {
                    <img @onclick="@(e => Play(x, y))" style="border:0px; padding:0px;" src="data:image/png;base64,@visualThemes[currentVisualTheme][Char.ToUpper(boardLineStrings[j][i])]" />
                  }
                  else
                  {
                    <img @onclick="@(e => Play(x, y))" style="border:0px; padding:0px;" src="data:image/png;base64,@visualThemes[currentVisualTheme][boardLineStrings[j][i]]" />
                  }
                </td>
              }
            </tr>
          }
        </tbody>
      </table>
    </div>

    <br />
    <p>
      <button @onclick="Undo" disabled="@(!IsConnected || lastPlayX == -1)">@stringResource[languageCode]["UndoButton"]</button>
    </p>
    <p>
      <select class="form-control selectpicker" @onchange="OnThemeChanged">
        <option value="go">Go Board</option>
        <option value="reversi">Reversi Board</option>
      </select>
    </p>
    <p>
      <input type="checkbox" @bind="shouldPlaySound" /> @stringResource[languageCode]["PlayStoneSound"]
    </p>
    <hr>
    <div>@stringResource[languageCode]["ExpirationMessage"]</div>
  }

  <div>@serverMessage</div>
</div>

@code {
  private Int32 cellSize = 35;
  private Single zoomFactor = 1.0f;
  private HubConnection hubConnection;
  private List<String> boardLineStrings = new List<String>();
  private String connectedUsersMessage;
  private String turnMessage;
  private String serverMessage;
  private Int32 lastPlayX = -1;
  private Int32 lastPlayY = -1;
  private Int32 lastLastPlayX = -1;
  private Int32 lastLastPlayY = -1;
  private Char winnerChar = 'n';
  private String languageCode;
  private Int32 reconnectTimer = -1;
  private String currentVisualTheme;
  private Dictionary<String, Dictionary<Char, String>> visualThemes;
  private String stoneSound;
  private Boolean shouldPlaySound = true;
  private HashSet<Char> playedStone = new() { 'b', 'B', 'w', 'W' };

  private Dictionary<String, Dictionary<String, String>> stringResource;

  [Parameter]
  public String GameId { get; set; }

  protected override async Task OnInitializedAsync()
  {
    SetLanguages();
    SetVisualThemes();
    SetStoneSound();
    BrowserResizeService.OnResize += BrowserHasResized;
    await jsRuntime.InvokeVoidAsync("browserResize.registerResizeCallback");

    hubConnection = new HubConnectionBuilder()
      .WithUrl(NavigationManager.ToAbsoluteUri("/connect6hub"))
      .Build();

    hubConnection.KeepAliveInterval = TimeSpan.FromSeconds(60);

    hubConnection.On<Dictionary<String, String>>("CurrentBoard", async (currentState) => await CurrentBoard(currentState));
    hubConnection.On<String>("ServerMessage", (messageString) => ServerMessage(messageString));
    hubConnection.On<String>("NoGameFound", (messageString) => NoGameFound(messageString));
    hubConnection.On<Int32>("ConnectionSize", (connectionSize) => ConnectionSize(connectionSize));

    hubConnection.Closed += async (e) => await OnClosed(e);

    await InitializeConnection();
  }

  #region Received Event

  private async Task CurrentBoard(Dictionary<String, String> currentState)
  {
    var tempBoard = currentState["boardString"].Split("\n").ToList();
    lastPlayX = Int32.Parse(currentState["lastPlayX"]);
    lastPlayY = Int32.Parse(currentState["lastPlayY"]);
    lastLastPlayX = Int32.Parse(currentState["lastLastPlayX"]);
    lastLastPlayY = Int32.Parse(currentState["lastLastPlayY"]);
    winnerChar = DetermineWinner(tempBoard, lastPlayX, lastPlayY);

    if (winnerExist)
      turnMessage = String.Format(
        stringResource[languageCode]["VictoryMessage"],
        winnerChar == 'b' ? stringResource[languageCode]["Black"] : stringResource[languageCode]["White"]
      );
    else
      turnMessage = String.Format(
        stringResource[languageCode]["TurnMessage"],
        currentState["currentTurn"] == "b" ? stringResource[languageCode]["Black"] : stringResource[languageCode]["White"],
        currentState["currentTurnRemaining"]
      );

    Boolean firstTimeRunning = (boardLineStrings.Count == 0);
    boardLineStrings = tempBoard;

    if (firstTimeRunning)
      await BrowserHasResized();
    StateHasChanged();

    if (shouldPlaySound && !firstTimeRunning)
      if (currentState["soundCue"] == "placeStone")
        await jsRuntime.InvokeVoidAsync("soundPlayer.playStoneSound");
  }

  private void ServerMessage(String messageString)
  {
    serverMessage = messageString;
    StateHasChanged();
  }

  private void NoGameFound(String messageString)
  {
    serverMessage = stringResource[languageCode]["NoGameFound"];
    StateHasChanged();
  }

  private void ConnectionSize(Int32 connectionSize)
  {
    connectedUsersMessage = String.Format(stringResource[languageCode]["CurrentSessionUsersMessage"], connectionSize);
    StateHasChanged();
  }

  #endregion

  private async Task OnClosed(Exception e)
  {
    await InitializeConnection();
    StateHasChanged();
  }

  private void OnThemeChanged(ChangeEventArgs e)
  {
    currentVisualTheme = e.Value.ToString();
    StateHasChanged();
  }

  private async Task BrowserHasResized()
  {
    Single newWidth = await jsRuntime.InvokeAsync<Int32>("browserResize.getInnerWidth");
    Single totalBoardWidth = cellSize * boardLineStrings[0].Length + cellSize * 2.5f;
    if (newWidth < totalBoardWidth)
      zoomFactor = newWidth / totalBoardWidth;
    else
      zoomFactor = 1.0f;
    StateHasChanged();
  }

  private async Task InitializeConnection()
  {
    await hubConnection.StartAsync();
    await hubConnection.SendAsync("InitializeBoardAndConnection", GameId);
  }

  private Char DetermineWinner(List<String> tempBoard, Int32 lastPlayX, Int32 lastPlayY)
  {
    if (IsVictory('b', tempBoard, lastPlayX, lastPlayY))
      return 'b';
    else if (IsVictory('w', tempBoard, lastPlayX, lastPlayY))
      return 'w';
    else
      return 'n';
  }

  private Boolean IsVictory(Char stoneColor, List<String> tempBoard, Int32 lastPlayX, Int32 lastPlayY)
  {
    Int32 dimX = tempBoard[0].Length;
    Int32 dimY = tempBoard.Count;
    if (!IsWithinBoundary(dimX, dimY, lastPlayX, lastPlayY))
      return false;

    StringBuilder sb = new StringBuilder();
    String winningString = $"{stoneColor}{stoneColor}{stoneColor}{stoneColor}{stoneColor}{stoneColor}";

    // Horizontal Match
    sb.Clear();
    for (Int32 i = 0; i < dimX; ++i)
      sb.Append(tempBoard[lastPlayY][i]);
    if (sb.ToString().Contains(winningString))
      return true;

    // Vertical Match
    sb.Clear();
    for (Int32 j = 0; j < dimY; ++j)
      sb.Append(tempBoard[j][lastPlayX]);
    if (sb.ToString().Contains(winningString))
      return true;

    // Diagonal left
    Int32 ii = lastPlayX;
    Int32 jj = lastPlayY;
    while (IsWithinBoundary(dimX, dimY, ii - 1, jj - 1))
    {
      --ii;
      --jj;
    }
    sb.Clear();
    while (IsWithinBoundary(dimX, dimY, ii, jj))
    {
      sb.Append(tempBoard[jj][ii]);
      ++ii;
      ++jj;
    }
    if (sb.ToString().Contains(winningString))
      return true;
    // Diagonal right
    ii = lastPlayX;
    jj = lastPlayY;
    while (IsWithinBoundary(dimX, dimY, ii - 1, jj + 1))
    {
      --ii;
      ++jj;
    }
    sb.Clear();
    while (IsWithinBoundary(dimX, dimY, ii, jj))
    {
      sb.Append(tempBoard[jj][ii]);
      ++ii;
      --jj;
    }
    if (sb.ToString().Contains(winningString))
      return true;

    return false;
  }

  private Boolean IsWithinBoundary(Int32 dimX, Int32 dimY, Int32 x, Int32 y) => 0 <= x && x < dimX && 0 <= y && y < dimY;

  private Task Play(Int32 x, Int32 y)
  {
    if (winnerExist)
      return Task.CompletedTask;
    else if (!playedStone.Contains(boardLineStrings[y][x]))
      return hubConnection.SendAsync("PlaceStone", GameId, x, y);
    else
      return Task.CompletedTask;
  }

  Task Undo() => hubConnection.SendAsync("UndoStone", GameId);

  Task NewGame() => hubConnection.SendAsync("NewGame", GameId);

  private String connectionUrl => $"https://kyler.ddnsfree.com/{NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}";

  private Boolean winnerExist => winnerChar != 'n';

  public Boolean IsConnected =>
      hubConnection.State == HubConnectionState.Connected;

  public void Dispose()
  {
    _ = hubConnection.DisposeAsync();
    BrowserResizeService.OnResize -= BrowserHasResized;
  }

  private void SetLanguages()
  {
    stringResource = Connect6Lang.GetStringResources();

    // Parse query params
    var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("lang", out var languageCodeValue))
    {
      languageCode = languageCodeValue.First();
      if (!stringResource.ContainsKey(languageCode))
        languageCode = "en-us";
    }
    else
      languageCode = "en-us";
  }

  private void SetVisualThemes()
  {
    visualThemes = Connect6BoardResource.GetVisualThemes();
    currentVisualTheme = "go"; // Default
  }

  private void SetStoneSound()
  {
    stoneSound = Connect6BoardResource.GetStoneSound();
  }
}