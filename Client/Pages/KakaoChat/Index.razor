@page "/kakaochat"
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization
@using System.Text
@implements IDisposable

<h1>카카오톡 단톡방 분석기</h1>
<p>카카오톡 대화 저장파일을 선택하세요 (서버로 그 어떤 정보도 전달되지 않고 모든 정보는 보시는 페이지 내에서 분석됩니다.)</p>
<InputFile OnChange="@LoadFiles" />
<br />
<br />

<p>@((MarkupString)result)</p>

@code {
  String result = "";

  async Task LoadFiles(InputFileChangeEventArgs e)
  {
    result = "파일 읽는중";
    StateHasChanged();
    StreamReader sr = new StreamReader(e.File.OpenReadStream(1000000000));
    String fileContent = await sr.ReadToEndAsync();
    fileContent = fileContent.Replace("\r", "");
    List<String> lines = fileContent.Split("\n").ToList();
    result = $"{lines.Count}줄 분석중";
    StateHasChanged();
    result = await AnalyzeLinesAsync(lines);
  }

  private async Task<String> AnalyzeLinesAsync(List<String> lines)
  {
    return await Task<String>.Run(() =>
    {
      String languageMode = "ko";
      if (lines[0].StartsWith("KakaoTalk Chats"))
        languageMode = "en";
      Dictionary<String, (Int32 conversationCount, DateTime lastConversationDateTime)> userStats = new Dictionary<String, (Int32, DateTime)>();
      Dictionary<String, String> latestStatus = new Dictionary<String, String>();
      foreach (String line in lines)
      {
        Boolean shouldCheck = false;
        if (languageMode == "ko")
          shouldCheck = line.Contains(',') && line.Contains(" : ");
        else if (languageMode == "en")
          shouldCheck = line.Count((c) => c == ',') == 3 && line.Contains(" : ");
        if (shouldCheck)
        {
          var conversation = GetConversationLine(line, languageMode);
          String userName = conversation.userName;
          if (userName == "")
            continue;

          if (!latestStatus.ContainsKey(userName))
            latestStatus.Add(userName, "활동중");
          else
            latestStatus[userName] = "활동중";
          if (!userStats.ContainsKey(userName))
            userStats.Add(userName, (1, (DateTime)conversation.conversationDateTime));
          else
          {
            var value = userStats[userName];
            value.conversationCount++;
            value.lastConversationDateTime = (DateTime)conversation.conversationDateTime;
            userStats[userName] = value;
          }
        }
        else if (languageMode == "ko")
        {
          if (line.EndsWith("님이 들어왔습니다."))
          {
            String userName = line.Substring(line.IndexOf(", ") + 2);
            userName = userName.Substring(0, userName.IndexOf("님이 들어왔습니다."));
            if (!latestStatus.ContainsKey(userName))
              latestStatus.Add(userName, "활동중");
            else
              latestStatus[userName] = "활동중";
          }
          else if (line.EndsWith("님이 나갔습니다."))
          {
            String userName = line.Substring(line.IndexOf(", ") + 2);
            userName = userName.Substring(0, userName.IndexOf("님이 나갔습니다."));
            if (!latestStatus.ContainsKey(userName))
              latestStatus.Add(userName, "나감");
            else
              latestStatus[userName] = "나감";
          }
          else if (line.EndsWith("님을 내보냈습니다."))
          {
            String userName = line.Substring(line.IndexOf(", ") + 2);
            userName = userName.Substring(0, userName.IndexOf("님을 내보냈습니다."));
            if (!latestStatus.ContainsKey(userName))
              latestStatus.Add(userName, "내보냄");
            else
              latestStatus[userName] = "내보냄";
          }
        }
        else if (languageMode == "en")
        {
          if (line.EndsWith(" joined this chatroom."))
          {
            String userName = line.Substring(line.IndexOf("M, ") + 3);
            userName = userName.Substring(0, userName.IndexOf(" joined this chatroom."));
            if (!latestStatus.ContainsKey(userName))
              latestStatus.Add(userName, "활동중");
            else
              latestStatus[userName] = "활동중";
          }
          else if (line.EndsWith(" left this chatroom."))
          {
            String userName = line.Substring(line.IndexOf("M, ") + 3);
            userName = userName.Substring(0, userName.IndexOf(" left this chatroom."));
            if (!latestStatus.ContainsKey(userName))
              latestStatus.Add(userName, "나감");
            else
              latestStatus[userName] = "나감";
          }
          else if (line.EndsWith(" has been removed from this chatroom."))
          {
            String userName = line.Substring(line.IndexOf("M, ") + 3);
            userName = userName.Substring(0, userName.IndexOf(" has been removed from this chatroom."));
            if (!latestStatus.ContainsKey(userName))
              latestStatus.Add(userName, "내보냄");
            else
              latestStatus[userName] = "내보냄";
          }
        }
      }

      DateTime today = DateTime.Now;
      StringBuilder sb = new StringBuilder();
      sb.AppendLine(ReportForUsers(today, userStats, latestStatus, "활동중"));
      sb.AppendLine(ReportForUsers(today, userStats, latestStatus, "나감"));
      sb.AppendLine(ReportForUsers(today, userStats, latestStatus, "내보냄"));
      return sb.ToString();
    });
  }

  private String ReportForUsers(DateTime today, Dictionary<String, (Int32 conversationCount, DateTime lastConversationDateTime)> userStats, Dictionary<String, String> latestStatus, String status)
  {
    StringBuilder sb = new StringBuilder();
    sb.AppendLine($"<h2>{status}</h2>");
    sb.AppendLine("<table style=\"width:100%;text-align: left;border: 1px solid #ddd;\">");
    sb.AppendLine("<tr><th>대화명</th><th>대화수</th><th>최근대화시간</th></tr>");
    var usersInList = userStats.ToList();
    usersInList.Sort((x, y) => y.Value.lastConversationDateTime.CompareTo(x.Value.lastConversationDateTime));
    foreach (var user in usersInList)
    {
      if (latestStatus[user.Key] == status)
      {
        String userName = user.Key;
        Int32 convoCount = user.Value.conversationCount;
        DateTime lastConvoTime = user.Value.lastConversationDateTime;
        TimeSpan timeDiff = today - lastConvoTime;
        String deltaString = timeDiff.Days == 0 ? (timeDiff.Hours == 0 ? $"{timeDiff.Minutes} 분전" : $"{timeDiff.Hours} 시간전") : $"{(Int32)timeDiff.TotalDays} 일전";
        sb.AppendLine($"<tr><td>{userName}</td><td>{convoCount}</td><td>{lastConvoTime.ToString("yyyy-MM-dd HH:mm:ss")} ({deltaString})</td></tr>");
      }
    }
    sb.AppendLine("</table>");
    return sb.ToString();
  }

  private (DateTime? conversationDateTime, String userName) GetConversationLine(String line, String languageMode)
  {
    if (languageMode == "ko")
    {
      String[] segments = line.Split(',');
      DateTime? dateTime = ParseDateTime(segments[0]);
      if (dateTime == null)
        return (null, "");
      else
        return (dateTime, segments[1].Split(" : ")[0].Trim());
    }
    else if (languageMode == "en")
    {
      Int32 dateEndsIndex = line.IndexOf("M, ") + 1;
      String dateTimeString = line.Substring(0, dateEndsIndex);
      if (!DateTime.TryParse(dateTimeString, out DateTime dateTime))
        return (null, "");
      else
        return (dateTime, line.Substring(dateEndsIndex + 2).Split(" : ")[0].Trim());
    }
    else
      return (null, "");
  }

  private DateTime? ParseDateTime(String dateTimeSting)
  {
    String[] dateTimeParts = dateTimeSting.Split(' ');
    if (dateTimeParts.Length != 5)
      return null;
    Int32 year;
    if (!Int32.TryParse(dateTimeParts[0].Substring(0, dateTimeParts[0].Length - 1), out year))
      return null;
    Int32 month;
    if (!Int32.TryParse(dateTimeParts[1].Substring(0, dateTimeParts[1].Length - 1), out month))
      return null;
    Int32 day;
    if (!Int32.TryParse(dateTimeParts[2].Substring(0, dateTimeParts[2].Length - 1), out day))
      return null;
    String[] hourParts = dateTimeParts[4].Split(':');
    Int32 hour;
    if (!Int32.TryParse(hourParts[0], out hour))
      return null;
    Int32 minute;
    if (!Int32.TryParse(hourParts[1], out minute))
      return null;
    if (dateTimeParts[3] == "오후" && hour != 12)
      hour += 12;
    DateTime newDateTime = new DateTime(year, month, day, hour, minute, 0);
    return newDateTime;
  }

  public void Dispose() { }
}