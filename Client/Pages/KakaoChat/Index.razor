@page "/kakaochat"
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization
@using System.Diagnostics
@using System.Text
@implements IDisposable

<h1>카카오톡 단톡방 분석기</h1>
<p>카카오톡 대화 저장파일을 선택하세요 (서버로 그 어떤 정보도 전달되지 않고 모든 정보는 보시는 페이지 내에서 분석됩니다.)</p>
<InputFile OnChange="@LoadFiles" />
<br />
<br />
<p>@status</p>
@if (result != "")
{
  <h3>필터</h3>
  <select @onchange="MinimumConvoFilterChanged">
    <option value="1">최소 대화 1번</option>
    <option value="10">최소 대화 10번</option>
    <option value="30">최소 대화 30번</option>
    <option value="50">최소 대화 50번</option>
    <option value="100">최소 대화 100번</option>
    <option value="500">최소 대화 500번</option>
    <option value="1000">최소 대화 1000번</option>
    <option value="3000">최소 대화 3000번</option>
    <option value="5000">최소 대화 5000번</option>
    <option value="10000">최소 대화 10000번</option>
  </select>
  <br/>
  <br/>
  <p>@((MarkupString)result)</p>
}

@code {
  String status = "";
  String result = "";
  Int32 minimumConvo = 0;
  Dictionary<String, KakaoStat> userStats = new();
  Dictionary<String, String> latestStatus = new();

  async Task LoadFiles(InputFileChangeEventArgs e)
  {
    status = "파일 읽는중";
    StateHasChanged();
    await Task.Delay(1);

    MemoryStream memoryStream = new();
    Stream stream = e.File.OpenReadStream(1000000000);
    await stream.CopyToAsync(memoryStream);
    memoryStream.Position = 0;
    StreamReader sr = new StreamReader(memoryStream);

    String totalString = await sr.ReadToEndAsync();
    String[] lines = totalString.Replace("\r", "").Split('\n');

    status = "분석시작";
    StateHasChanged();
    await Task.Delay(1);

    userStats.Clear();
    latestStatus.Clear();

    // Analyze first line
    String languageMode = "ko";
    if (lines[0].StartsWith("KakaoTalk Chats"))
      languageMode = "en";

    Int32 previousReportedSeconds = 0;
    Stopwatch sw = new();
    sw.Start();
    for (Int32 i = 0; i < lines.Length; ++i)
    {
      String line = lines[i];
      AnalyzeChunk(line, userStats, latestStatus, languageMode);

      Int32 currentElapsedSeconds = (Int32)sw.Elapsed.TotalSeconds;
      if (previousReportedSeconds < currentElapsedSeconds)
      {
        previousReportedSeconds = currentElapsedSeconds;
        Single percent = 100f * (i + 1) / lines.Length;
        Single elapsedSeconds = (Single)sw.Elapsed.TotalSeconds;
        Int32 remainingSeconds = (Int32)(elapsedSeconds / percent * 100f - elapsedSeconds);
        status = $"분석중: {i + 1} / {lines.Length} 줄 ({percent.ToString("F2")}%). 남은시간 {remainingSeconds}초";
        StateHasChanged();
        await Task.Delay(1);
      }
    }
    PrintResult();
  }

  private void MinimumConvoFilterChanged(ChangeEventArgs e)
  {
    minimumConvo = Int32.Parse((String)e.Value);
    PrintResult();
  }

  private void PrintResult()
  {
    status = "";

    DateTime today = DateTime.Now;
    StringBuilder sb = new StringBuilder();
    sb.AppendLine(ReportForUsers(today, userStats, latestStatus, "활동중"));
    sb.AppendLine("<br/>");
    sb.AppendLine(ReportForUsers(today, userStats, latestStatus, "나감"));
    sb.AppendLine("<br/>");
    sb.AppendLine(ReportForUsers(today, userStats, latestStatus, "내보냄"));

    result = sb.ToString();
  }

  private void AnalyzeChunk(String line, Dictionary<String, KakaoStat> userStats, Dictionary<String, String> latestStatus, String languageMode)
  {
    Boolean shouldCheck = false;
    if (languageMode == "ko")
      shouldCheck = line.Contains(',') && line.Contains(" : ");
    else if (languageMode == "en")
      shouldCheck = line.Count((c) => c == ',') == 3 && line.Contains(" : ");
    if (shouldCheck)
    {
      var conversation = GetConversationLine(line, languageMode);
      String userName = conversation.userName;
      if (userName == "")
        return;

      if (!latestStatus.ContainsKey(userName))
        latestStatus.Add(userName, "활동중");
      else
        latestStatus[userName] = "활동중";
      if (!userStats.ContainsKey(userName))
      {
        KakaoStat newKakaoStat = new KakaoStat
            {
              ConversationCount = 1,
              LastConversationDateTime = (DateTime)conversation.conversationDateTime,
              FirstConversationDateTime = (DateTime)conversation.conversationDateTime
            };
        userStats.Add(userName, newKakaoStat);
      }
      else
      {
        var value = userStats[userName];
        ++value.ConversationCount;
        value.LastConversationDateTime = (DateTime)conversation.conversationDateTime;
        userStats[userName] = value;
      }
    }
    else if (languageMode == "ko")
    {
      if (line.EndsWith("님이 들어왔습니다."))
      {
        String userName = line.Substring(line.IndexOf(", ") + 2);
        userName = userName.Substring(0, userName.IndexOf("님이 들어왔습니다."));
        if (!latestStatus.ContainsKey(userName))
          latestStatus.Add(userName, "활동중");
        else
          latestStatus[userName] = "활동중";
      }
      else if (line.EndsWith("님이 나갔습니다."))
      {
        String userName = line.Substring(line.IndexOf(", ") + 2);
        userName = userName.Substring(0, userName.IndexOf("님이 나갔습니다."));
        if (!latestStatus.ContainsKey(userName))
          latestStatus.Add(userName, "나감");
        else
          latestStatus[userName] = "나감";
      }
      else if (line.EndsWith("님을 내보냈습니다."))
      {
        String userName = line.Substring(line.IndexOf(", ") + 2);
        userName = userName.Substring(0, userName.IndexOf("님을 내보냈습니다."));
        if (!latestStatus.ContainsKey(userName))
          latestStatus.Add(userName, "내보냄");
        else
          latestStatus[userName] = "내보냄";
      }
    }
    else if (languageMode == "en")
    {
      if (line.EndsWith(" joined this chatroom."))
      {
        String userName = line.Substring(line.IndexOf("M, ") + 3);
        userName = userName.Substring(0, userName.IndexOf(" joined this chatroom."));
        if (!latestStatus.ContainsKey(userName))
          latestStatus.Add(userName, "활동중");
        else
          latestStatus[userName] = "활동중";
      }
      else if (line.EndsWith(" left this chatroom."))
      {
        String userName = line.Substring(line.IndexOf("M, ") + 3);
        userName = userName.Substring(0, userName.IndexOf(" left this chatroom."));
        if (!latestStatus.ContainsKey(userName))
          latestStatus.Add(userName, "나감");
        else
          latestStatus[userName] = "나감";
      }
      else if (line.EndsWith(" has been removed from this chatroom."))
      {
        String userName = line.Substring(line.IndexOf("M, ") + 3);
        userName = userName.Substring(0, userName.IndexOf(" has been removed from this chatroom."));
        if (!latestStatus.ContainsKey(userName))
          latestStatus.Add(userName, "내보냄");
        else
          latestStatus[userName] = "내보냄";
      }
    }
  }

  private String ReportForUsers(DateTime today, Dictionary<String, KakaoStat> userStats, Dictionary<String, String> latestStatus, String status)
  {
    StringBuilder sb = new StringBuilder();
    sb.AppendLine($"<h2>{status}</h2>");
    sb.AppendLine("<table style=\"width:100%;text-align: left;border: 1px solid #ddd;\">");
    sb.Append("<tr style=\"background-color: #aaa;\">");
    sb.Append("<th>대화명</th>");
    sb.Append("<th>대화수</th>");
    sb.Append("<th>최근대화시간</th>");
    sb.Append("<th>평균대화리젠</th>");
    sb.AppendLine("</tr>");
    var usersInList = userStats.ToList();
    usersInList.Sort((x, y) => y.Value.LastConversationDateTime.CompareTo(x.Value.LastConversationDateTime));
    Boolean colorBackground = false;
    foreach (var user in usersInList)
    {
      if (latestStatus[user.Key] == status)
      {
        String userName = user.Key;
        Int32 convoCount = user.Value.ConversationCount;
        if (convoCount < minimumConvo)
          continue;
        DateTime firstConvoTime = user.Value.FirstConversationDateTime;
        DateTime lastConvoTime = user.Value.LastConversationDateTime;
        TimeSpan timeDiffFromToday = today - lastConvoTime;
        String deltaString = timeDiffFromToday.Days == 0 ? (timeDiffFromToday.Hours == 0 ? $"{timeDiffFromToday.Minutes} 분전" : $"{timeDiffFromToday.Hours} 시간전") : $"{(Int32)timeDiffFromToday.TotalDays} 일전";
        TimeSpan timeDiffEver = lastConvoTime - firstConvoTime;
        String backgroundStyleString = colorBackground ? "" : " style=\"background-color: #efefef;\"";
        sb.Append($"<tr{backgroundStyleString}>");
        sb.Append($"<td>{userName}</td>");
        sb.Append($"<td>{convoCount}</td>");
        sb.Append($"<td>{lastConvoTime.ToString("yyyy-MM-dd HH:mm:ss")} ({deltaString})</td>");
        sb.Append($"<td>평균 {(timeDiffEver.TotalMinutes / convoCount).ToString("F1")}분 마다 한번씩 대화</td>");
        sb.AppendLine("</tr>");
        colorBackground = !colorBackground;
      }
    }
    sb.AppendLine("</table>");
    return sb.ToString();
  }

  private (DateTime? conversationDateTime, String userName) GetConversationLine(String line, String languageMode)
  {
    if (languageMode == "ko")
    {
      String[] segments = line.Split(',');
      DateTime? dateTime = ParseDateTime(segments[0]);
      if (dateTime == null)
        return (null, "");
      else
        return (dateTime, segments[1].Split(" : ")[0].Trim());
    }
    else if (languageMode == "en")
    {
      Int32 dateEndsIndex = line.IndexOf("M, ") + 1;
      String dateTimeString = line.Substring(0, dateEndsIndex);
      if (!DateTime.TryParse(dateTimeString, out DateTime dateTime))
        return (null, "");
      else
        return (dateTime, line.Substring(dateEndsIndex + 2).Split(" : ")[0].Trim());
    }
    else
      return (null, "");
  }

  private DateTime? ParseDateTime(String dateTimeSting)
  {
    String[] dateTimeParts = dateTimeSting.Split(' ');
    if (dateTimeParts.Length != 5)
      return null;
    Int32 year;
    if (!Int32.TryParse(dateTimeParts[0].Substring(0, dateTimeParts[0].Length - 1), out year))
      return null;
    Int32 month;
    if (!Int32.TryParse(dateTimeParts[1].Substring(0, dateTimeParts[1].Length - 1), out month))
      return null;
    Int32 day;
    if (!Int32.TryParse(dateTimeParts[2].Substring(0, dateTimeParts[2].Length - 1), out day))
      return null;
    String[] hourParts = dateTimeParts[4].Split(':');
    Int32 hour;
    if (!Int32.TryParse(hourParts[0], out hour))
      return null;
    Int32 minute;
    if (!Int32.TryParse(hourParts[1], out minute))
      return null;
    if (dateTimeParts[3] == "오후" && hour != 12)
      hour += 12;
    DateTime newDateTime = new DateTime(year, month, day, hour, minute, 0);
    return newDateTime;
  }

  public void Dispose() { }
}