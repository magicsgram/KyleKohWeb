@page "/wordle"
@using Microsoft.AspNetCore.SignalR.Client
@using System
@using System.Collections.Generic
@using System.Text
@using System.Threading
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager

<body>
  <div>
      Pattern: <i>WORD FILTER</i>. Example: <i>FLANK 00102</i> means<br/>
      - 0: The word does not contain F, L, or N anywhere. (Dark Grey Blocks)<br/>
      - 1: The word contains A somewhere, but not in the middle. (Yellow Blocks)<br/>
      - 2: The word contains K at the end. (Green Blocks)
  </div>
  
  <label>Pattern: </label><br/>
  <textarea @bind="InputText" @bind:event="oninput" style="font-family: Courier;" rows="8" cols="30" />

  <hr>
  <table style="border: 1px solid grey;">
    <tr valign="top">
      <th style="border: 1px solid grey;">Candidates</th>
      <th style="border: 1px solid grey;">Suggestions</th>
    </tr>
    <tr valign="top">
      <td style="border: 1px solid grey;"><pre>@candidates</pre></td>
      <td style="border: 1px solid grey;"><pre>@suggestions</pre></td>
    </tr>
  </table>
  
</body>


@code {
  private HubConnection hubConnection;
  private List<String> wordsFull = new();
  private Random random = new();

  private String candidates = "";
  private String suggestions = "";

  private String inputText = "";
  private String InputText
  {
    get => inputText;
    set
    {
      inputText = value;
      RefreshWords();
    }
  }

  protected override async Task OnInitializedAsync()
  {
    hubConnection = new HubConnectionBuilder()
      .WithUrl(NavigationManager.ToAbsoluteUri("/WordleHub"))
      .Build();
    hubConnection.On<String>("WordsFullString", (wordsFullString) => WordsFullReceived(wordsFullString));

    await hubConnection.StartAsync();
    await hubConnection.SendAsync("GetWordsFull");
  }

  private async Task WordsFullReceived(String wordsFullString)
  {
    foreach (String word in wordsFullString.Replace("\r", "").Split('\n'))
      wordsFull.Add(word.ToLower());
    await hubConnection.DisposeAsync();
    wordsFull = wordsFull.OrderBy((x) => random.Next()).ToList();
    wordsFull = SortBasedOnDupPoint(wordsFull);
    candidates = suggestions = String.Join("\n", wordsFull);
    StateHasChanged();
  }

  private void RefreshWords()
  {
    try
    {
      if (inputText.Length > 0)
      {
        wordsFull = wordsFull.OrderBy((x) => random.Next()).ToList();
        var candidateWords = wordsFull.ToList().Select((word) => word);
        var suggestionWords = wordsFull.ToList().Select((word) => word);
        
        Dictionary<String, List<(Int32 i, Char c, Char p)>> inputWordsDict = new();
        foreach (String filterPattern in inputText.Split('\n'))
        {
          String[] parsed = filterPattern.Trim().ToLower().Split(' ');
          if (parsed.Length != 2)
          {
            inputWordsDict.Clear();
            break;
          }
          String inputWord = parsed[0].ToLower();
          String pattern = parsed[1];
          if (inputWord.Length != pattern.Length)
          {
            inputWordsDict.Clear();
            break;
          }

          List<(Int32 i, Char c, Char p)> newTuples = new();
          for (Int32 i = 0; i < inputWord.Length; ++i)
            newTuples.Add((i, inputWord[i], pattern[i]));
          inputWordsDict.Add(inputWord, newTuples);
        }
        foreach (var inputWordKVPair in inputWordsDict)
        {
          String inputWord = inputWordKVPair.Key;
          List<(Int32 i, Char c, Char p)> tuples = inputWordKVPair.Value;
          foreach (Char c in "abcdefghijklmnopqrstuvwxyz")
          {
            if (!inputWord.Contains(c))
              continue;
            
            Int32 grayCount = tuples.Count((tuple) => tuple.c == c && tuple.p == '0');
            Int32 yellowCount = tuples.Count((tuple) => tuple.c == c && tuple.p == '1');
            Int32 greenCount = tuples.Count((tuple) => tuple.c == c && tuple.p == '2');

            foreach (var tuple in tuples)
            {
              switch (tuple.p)
              {
                case '2':
                  candidateWords
                    = (from word in candidateWords
                      where word[tuple.i] == tuple.c
                      select word);
                  suggestionWords
                    = (from word in suggestionWords
                      where !word.Contains(tuple.c)
                      select word);
                  break;
                case '1':
                  candidateWords
                    = (from word in candidateWords
                      where word[tuple.i] != tuple.c
                      select word);
                  suggestionWords
                    = (from word in suggestionWords
                      where !word.Contains(tuple.c)
                      select word);
                  break;
                case '0':
                  suggestionWords
                    = (from word in suggestionWords
                      where !word.Contains(tuple.c)
                      select word);
                  break;
              }
            }

            if (yellowCount == 0 && greenCount == 0)
            {
              candidateWords
                = (from word in candidateWords
                    where !word.Contains(c)
                    select word);
            }
            else
            {
              candidateWords
              = (from word in candidateWords
                  where word.Count((wc) => wc == c) >= greenCount + yellowCount
                  select word);
            }            
          }
        }
        if (inputWordsDict.Count > 0)
        {
          List<String> filteredWords = SortBasedOnDupPoint(candidateWords);
          candidates = String.Join("\n", filteredWords);

          filteredWords = SortBasedOnDupPoint(suggestionWords);
          suggestions = String.Join("\n", filteredWords);
        }
      } else
      {
        wordsFull = wordsFull.OrderBy((x) => random.Next()).ToList();
        List<String> filteredWords = SortBasedOnDupPoint(wordsFull);
        candidates = suggestions = String.Join("\n", filteredWords);
      }
      StateHasChanged();
    }
    catch (Exception e)
    {
      Console.WriteLine(e.Message);
    }
  }

  private static List<String> SortBasedOnDupPoint(IEnumerable<String> wordsList)
  {
    List<(String word, Int32 dupPoint)> points = new();
    foreach (String word in wordsList)
    {
      List<Int32> dupCount = new();
      foreach (Char c in word)
        dupCount.Add(word.Count((x) => x == c));
      points.Add((word, dupCount.Max()));
    }
    points.Sort((x, y) => (x.dupPoint.CompareTo(y.dupPoint)));
    return points.Select(wordPoint => wordPoint.word).ToList();
  }
}
